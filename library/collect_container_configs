#!/usr/bin/env python2.7

import json
import os
import os.path

DOCUMENTATION = '''
---
module: collect_container_configs
short_description: collects container configuration data
description:
  - when run, this module collects the contents of container configuration files for
    all current containers
  - this can be run before an upgrade to store information that would be used after
    an upgrade
  - this is returned as a single string containing parsable JSON.
'''


CONTAINER_ROOT_DIR = '/var/lib/docker/containers'


CONFIG_FILENAME_OPTIONS = [
    ('config.v3.json', 3),
    ('config.v2.json', 2),
    ('config.json', 1)
]


def main():
    module = AnsibleModule(
        argument_spec=dict(),
        supports_check_mode=True)

    configs = {}
    config_versions = {}

    if os.path.isdir(CONTAINER_ROOT_DIR):
        for container in os.listdir(CONTAINER_ROOT_DIR):
            container_path = os.path.join(CONTAINER_ROOT_DIR, container)
            if not os.path.isdir(container_path):
                # we only expect directories here. Ignore the unexpected
                continue

            for basename, version in CONFIG_FILENAME_OPTIONS:
                config_path = os.path.join(container_path, basename)
                if os.path.isfile(config_path):
                    break
            else:
                # no config file was found
                continue

            with file(config_path, 'r') as f:
                config = json.load(f)

            configs[container] = config
            config_versions[container] = version

    module.exit_json(
            changed=False,
            configs=configs,
            config_versions=config_versions)


from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()
