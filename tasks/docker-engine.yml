---
# Install docker engine.
#
# This is one of at least two mechanisms for installing Docker via apt (the other
# being the `lxc-docker` package). There is currently only one version of `docker-engine`
# available, so this mechanism will only work for the most recent `docker_version`,
# currently `1.8.1`.
#
# Installing this docker will remove the lxc-docker package.


- name: Add Docker Engine Repository Key
  apt_key:
    keyserver: "hkp://p80.pool.sks-keyservers.net:80"
    id: "58118E89F3A912897C070ADBF76221572C52609D"

- name: Add Docker Engine Repository
  apt_repository:
    repo: 'deb https://apt.dockerproject.org/repo ubuntu-{{ ansible_distribution_release }} main'
    update_cache: yes

- name: see if docker is already installed
  stat: path=/usr/bin/docker get_checksum=False
  register: docker_exec_stat_result
  always_run: True 

- name: Determine installed version
  command: docker --version
  changed_when: False
  always_run: True
  register: docker_version_result
  when: "{{ docker_exec_stat_result.stat.exists }}"

# "docker --version" output is formatted like this:
#
#     Docker version 1.10.2, build c3959b1
#
- name: store installed docker version
  set_fact:
    installed_docker_version: "{{ docker_version_result.stdout
                                  | regex_replace('^Docker version ', '')
                                  | regex_replace(', build [0-9a-f]+$', '') }}"
  when: "{{ docker_exec_stat_result.stat.exists }}"

- name: collect container data from before upgrade
  collect_container_configs:
  register: collect_container_configs_result
  when: "{{ docker_exec_stat_result.stat.exists
            and docker_attempt_upgrade_fixes }}"

# It should be OK to just run the apt install of the new docker package, regardless of the
# state of docker. However, there's an issue that sometimes occurs in that case, where the
# processes for the containers that existed before the upgrade aren't stopped by the upgrade, but
# instead are left hanging around with parent PID 1. Shutting down docker before the upgrade seems
# to prevent this.
- name: shut down docker before upgrade
  service: name=docker state=stopped
  when: "{{ docker_exec_stat_result.stat.exists and installed_docker_version != docker_version }}"
 
- name: Install Docker Engine
  apt: name="docker-engine={{ docker_version }}-0~{{ ansible_distribution_release }}" state=present
  register: docker_engine_install

# Some updates will break data volumes. There are two issues:
#  - if upgrading from <1.9 to 1.10+, then fix the vfs links. If we're upgrading to a 1.9.x client,
#    the Docker upgrade fixes that automatically.
#  - if upgrading from <1.10 to 1.10+, then fix the container configs for containers with volumes.
- name: handle repair of data volumes broken by updates
  repair_docker_data_volumes:
    fix_vfs_links: "{{ installed_docker_version | version_compare('1.9', '<')
                       and docker_version | version_compare('1.10', '>=') }}"
    fix_container_mountpoints: "{{ installed_docker_version | version_compare('1.10', '<')
                                   and docker_version | version_compare('1.10', '>=') }}"
    old_container_configs: "{{ collect_container_configs_result.configs | to_json }}"
  when: "{{ docker_engine_install | changed 
            and docker_exec_stat_result.stat.exists
            and docker_attempt_upgrade_fixes }}"
  register: repair_docker_data_volumes_result

- name: start docker after repair of docker settings
  service: name=docker state=started
  when: "{{ repair_docker_data_volumes_result is defined
            and repair_docker_data_volumes_result | changed }}"

# If we just installed or upgraded Docker, re-read Docker-related facts.
- name: reread facts about ansible_docker0
  setup: filter=ansible_docker0
  when: docker_engine_install|changed
